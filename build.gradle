import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.12+'
    id "com.modrinth.minotaur" version "2.+"
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

configurations {
    includeTransitive
}

repositories {}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    includeTransitive modImplementation("com.github.twitch4j:twitch4j:${project.version}") {
        exclude group: 'org.slf4j'
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'org.checkerframework', module: 'checker-qual'
        exclude group: 'org.jetbrains', module: 'annotations'
    }
}

configurations.getByName("includeTransitive").resolvedConfiguration.resolvedArtifacts.forEach(dep -> {
    dependencies.add("include", dep.id.componentIdentifier.displayName)
})

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        //mavenLocal()
        maven {
            url = System.getenv().MAVEN_REPO
            credentials(HttpHeaderCredentials) {
                name System.getenv().MAVEN_AUTH_HEADER
                value System.getenv().MAVEN_AUTH_TOKEN
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

build.dependsOn remapMavenJar
tasks.modrinth.dependsOn(tasks.remapMavenJar)

modrinth {
    String projectVersion = project.version.toString();
    List<String> projectVersionNumber = projectVersion.split("-", 2)
    String projectVersionName = "Release ${projectVersionNumber[0]}"
    if (projectVersion.contains("beta")) {
        List<String> projectBeta = projectVersionNumber[1].split("[.]", 2)
        projectVersionName = "${projectVersionNumber[0]} - Beta ${projectBeta[1]}"
        versionType = "beta"
    } else if (projectVersion.contains("alpha")) {
        List<String> projectAlpha = projectVersionNumber[1].split("[.]", 2)
        projectVersionName = "${projectVersionNumber[0]} - Alpha ${projectAlpha[1]}"
        versionType = "alpha"
    } else if (projectVersion.contains("rc")) {
        List<String> projectRC = projectVersionNumber[1].split("[.]", 2)
        projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${projectRC[1]}"
        versionType = "beta"
    }

    token = System.getenv("MODRINTH_TOKEN")
    projectId = "CmHD69Pj"
    versionName = projectVersionName
    changelog = "The changelog can be seen at https://github.com/twitch4j/twitch4j/releases/tag/v${project.version}"
    uploadFile = remapJar
}
